[
  {
    "id": "python-intro",
    "title": "Introduction to Python",
    "description": "Welcome to Python programming! Learn what Python is and why it's popular.",
    "category": "Basics",
    "difficulty": "beginner",
    "estimatedTime": 10,
    "xpReward": 30,
    "prerequisites": [],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "What is Python?",
        "content": "Python is a high-level, interpreted programming language created by Guido van Rossum in 1991. It's designed with readability in mind, using English keywords and simple syntax. Python is used in web development, data science, artificial intelligence, automation, and scientific computing."
      },
      {
        "id": "step-2",
        "type": "content",
        "title": "Why Choose Python?",
        "content": "• Easy to learn and read - Python's syntax is clean and intuitive\n• Versatile - Used in many fields from web apps to AI\n• Large community - Millions of developers worldwide\n• Rich libraries - Thousands of pre-built packages available\n• Cross-platform - Runs on Windows, Mac, Linux"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "Your First Python Program",
        "content": "The traditional first program in any language prints 'Hello, World!' to the screen:",
        "code": "print('Hello, World!')\nprint('Welcome to Python programming!')\nprint('Python is', 2024 - 1991, 'years old')",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Personal Greeting",
        "description": "Create a program that prints a greeting with your name.",
        "starterCode": "# Print a greeting with your name\n",
        "expectedOutput": "Hello, my name is [Your Name]",
        "solution": "print('Hello, my name is Alice')"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium", 
        "title": "Python Facts",
        "description": "Print three interesting facts about Python using multiple print statements.",
        "starterCode": "# Print three facts about Python\n",
        "expectedOutput": "Fact 1: Python was named after Monty Python\nFact 2: Python is open source\nFact 3: Python is interpreted, not compiled",
        "solution": "print('Fact 1: Python was named after Monty Python')\nprint('Fact 2: Python is open source')\nprint('Fact 3: Python is interpreted, not compiled')"
      },
      {
        "id": "hard-1",
        "difficulty": "Hard",
        "title": "Dynamic Information",
        "description": "Create a program that displays the current year and calculates Python's age dynamically.",
        "starterCode": "# Calculate and display Python's age\n# Python was created in 1991\n",
        "expectedOutput": "Current year: 2024\nPython's age: 33 years",
        "solution": "import datetime\ncurrent_year = datetime.datetime.now().year\npython_birth_year = 1991\nage = current_year - python_birth_year\nprint(f'Current year: {current_year}')\nprint(f'Python\\'s age: {age} years')"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "Who created the Python programming language?",
        "type": "multiple-choice",
        "options": ["Dennis Ritchie", "Guido van Rossum", "James Gosling", "Bjarne Stroustrup"],
        "correctAnswer": 1
      },
      {
        "id": "q2", 
        "question": "Python was first released in which year?",
        "type": "multiple-choice",
        "options": ["1989", "1991", "1995", "2000"],
        "correctAnswer": 1
      },
      {
        "id": "q3",
        "question": "Which function is used to display output in Python?",
        "type": "multiple-choice", 
        "options": ["output()", "display()", "print()", "show()"],
        "correctAnswer": 2
      }
    ]
  },
  {
    "id": "python-variables",
    "title": "Variables and Data Types",
    "description": "Learn to store and manipulate different types of data in Python.",
    "category": "Basics",
    "difficulty": "beginner",
    "estimatedTime": 15,
    "xpReward": 40,
    "prerequisites": ["python-intro"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "Understanding Variables",
        "content": "A variable is a named storage location in memory that holds data. In Python, variables are created when you assign a value to them. Unlike other languages, you don't need to declare the variable type - Python automatically determines it based on the value assigned."
      },
      {
        "id": "step-2",
        "type": "code",
        "title": "Creating Variables",
        "content": "Here's how to create variables of different types:",
        "code": "# String variable\nname = 'Alice'\nfull_name = \"Alice Johnson\"\n\n# Integer variable\nage = 25\nyear = 2024\n\n# Float variable\nheight = 5.6\ntemperature = 98.6\n\n# Boolean variable\nis_student = True\nhas_job = False\n\nprint(name, age, height, is_student)",
        "language": "python"
      },
      {
        "id": "step-3",
        "type": "content",
        "title": "Python Data Types",
        "content": "Python has several built-in data types:\n\n• str (String) - Text data: 'Hello'\n• int (Integer) - Whole numbers: 42\n• float - Decimal numbers: 3.14\n• bool (Boolean) - True or False\n• list - Ordered collection: [1, 2, 3]\n• dict (Dictionary) - Key-value pairs: {'key': 'value'}\n• tuple - Immutable sequence: (1, 2, 3)\n• set - Unique elements: {1, 2, 3}"
      },
      {
        "id": "step-4",
        "type": "code",
        "title": "Checking Data Types",
        "content": "Use the type() function to check what type of data a variable contains:",
        "code": "name = 'Alice'\nage = 25\nheight = 5.6\nis_student = True\n\nprint(type(name))      # <class 'str'>\nprint(type(age))       # <class 'int'>\nprint(type(height))    # <class 'float'>\nprint(type(is_student)) # <class 'bool'>",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Personal Information",
        "description": "Create variables to store your name, age, and favorite color, then print them.",
        "starterCode": "# Create variables for personal information\n",
        "expectedOutput": "Name: Alice\nAge: 25\nFavorite Color: Blue",
        "solution": "name = 'Alice'\nage = 25\nfavorite_color = 'Blue'\n\nprint('Name:', name)\nprint('Age:', age)\nprint('Favorite Color:', favorite_color)"
      },
      {
        "id": "medium-1", 
        "difficulty": "Medium",
        "title": "Variable Operations", 
        "description": "Create numeric variables and perform basic calculations, storing results in new variables.",
        "starterCode": "# Create variables for a rectangle's dimensions\nlength = 10\nwidth = 5\n# Calculate area and perimeter\n",
        "expectedOutput": "Area: 50\nPerimeter: 30",
        "solution": "length = 10\nwidth = 5\narea = length * width\nperimeter = 2 * (length + width)\n\nprint('Area:', area)\nprint('Perimeter:', perimeter)"
      },
      {
        "id": "hard-1",
        "difficulty": "Hard",
        "title": "Type Conversion Challenge",
        "description": "Create a program that takes string numbers, converts them to integers, performs calculations, and displays results.",
        "starterCode": "# String numbers that need conversion\nnum1_str = '15'\nnum2_str = '25'\n# Convert to integers and calculate\n",
        "expectedOutput": "Sum: 40\nProduct: 375\nAverage: 20.0",
        "solution": "num1_str = '15'\nnum2_str = '25'\n\nnum1 = int(num1_str)\nnum2 = int(num2_str)\n\nsum_result = num1 + num2\nproduct = num1 * num2\naverage = sum_result / 2\n\nprint('Sum:', sum_result)\nprint('Product:', product)\nprint('Average:', average)"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "Which of these is a valid variable name in Python?",
        "type": "multiple-choice",
        "options": ["2user", "user-name", "user_name", "user name"],
        "correctAnswer": 2
      },
      {
        "id": "q2",
        "question": "What data type is the value 3.14?",
        "type": "multiple-choice",
        "options": ["int", "float", "str", "bool"],
        "correctAnswer": 1
      },
      {
        "id": "q3",
        "question": "Which function tells you the data type of a variable?",
        "type": "multiple-choice",
        "options": ["typeof()", "type()", "datatype()", "kind()"],
        "correctAnswer": 1
      }
    ]
  },
  {
    "id": "python-dictionaries",
    "title": "Dictionaries and Key-Value Data",
    "description": "Master Python dictionaries for storing and accessing data with keys.",
    "category": "Data Structures",
    "difficulty": "intermediate",
    "estimatedTime": 30,
    "xpReward": 55,
    "prerequisites": ["python-variables"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "Understanding Dictionaries",
        "content": "Dictionaries are collections of key-value pairs, similar to real-world dictionaries where words (keys) have definitions (values). They're unordered, mutable, and extremely useful for representing structured data like records, configurations, and mappings."
      },
      {
        "id": "step-2",
        "type": "code",
        "title": "Creating and Accessing Dictionaries",
        "content": "Different ways to create and work with dictionaries:",
        "code": "# Creating dictionaries\nstudent = {\n    'name': 'Alice',\n    'age': 20,\n    'grade': 'A',\n    'enrolled': True\n}\n\n# Empty dictionary\nempty_dict = {}\n\n# Accessing values\nprint(student['name'])        # Alice\nprint(student.get('age'))     # 20\nprint(student.get('phone', 'Not provided'))  # Not provided\n\n# Check if key exists\nprint('grade' in student)     # True",
        "language": "python"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "Modifying Dictionaries",
        "content": "Dictionaries are mutable - you can change them after creation:",
        "code": "# Starting dictionary\nproduct = {\n    'name': 'Laptop',\n    'price': 999.99,\n    'category': 'Electronics'\n}\n\n# Add new key-value pairs\nproduct['brand'] = 'TechCorp'\nproduct['in_stock'] = True\n\n# Update existing values\nproduct['price'] = 899.99\n\n# Remove items\ndel product['category']  # Remove with del\nremoved_stock = product.pop('in_stock')  # Remove and return value\n\nprint(product)\nprint(f'Stock status was: {removed_stock}')",
        "language": "python"
      },
      {
        "id": "step-4",
        "type": "code",
        "title": "Dictionary Methods and Iteration",
        "content": "Useful methods for working with dictionaries:",
        "code": "# Sample data\ninventory = {\n    'apples': 50,\n    'bananas': 30,\n    'oranges': 25,\n    'grapes': 40\n}\n\n# Get all keys, values, and items\nprint('Fruits:', list(inventory.keys()))\nprint('Quantities:', list(inventory.values()))\nprint('All items:', list(inventory.items()))\n\n# Iterate through dictionary\nfor fruit, quantity in inventory.items():\n    print(f'{fruit}: {quantity} units')\n\n# Dictionary comprehension\nlow_stock = {fruit: qty for fruit, qty in inventory.items() if qty < 35}\nprint('Low stock:', low_stock)",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Student Record",
        "description": "Create a dictionary to store student information and display it.",
        "starterCode": "# Create a student record\nstudent_id = '12345'\nname = 'John Doe'\nage = 18\nmajor = 'Computer Science'\n",
        "expectedOutput": "Student Record:\nID: 12345\nName: John Doe\nAge: 18\nMajor: Computer Science",
        "solution": "student_id = '12345'\nname = 'John Doe'\nage = 18\nmajor = 'Computer Science'\n\nstudent = {\n    'id': student_id,\n    'name': name,\n    'age': age,\n    'major': major\n}\n\nprint('Student Record:')\nprint(f'ID: {student[\"id\"]}')\nprint(f'Name: {student[\"name\"]}')\nprint(f'Age: {student[\"age\"]}')\nprint(f'Major: {student[\"major\"]}')"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "Inventory Manager",
        "description": "Create an inventory system that tracks products and their quantities.",
        "starterCode": "# Inventory management system\ninventory = {\n    'laptops': 15,\n    'mice': 50,\n    'keyboards': 23\n}\n# Add monitors: 8, update laptops to 12, remove mice\n",
        "expectedOutput": "Updated Inventory:\nlaptops: 12\nkeyboards: 23\nmonitors: 8\nRemoved mice: 50 units",
        "solution": "inventory = {\n    'laptops': 15,\n    'mice': 50,\n    'keyboards': 23\n}\n\n# Add monitors\ninventory['monitors'] = 8\n\n# Update laptops\ninventory['laptops'] = 12\n\n# Remove mice\nremoved_mice = inventory.pop('mice')\n\nprint('Updated Inventory:')\nfor item, quantity in inventory.items():\n    print(f'{item}: {quantity}')\nprint(f'Removed mice: {removed_mice} units')"
      },
      {
        "id": "hard-1",
        "difficulty": "Hard",
        "title": "Grade Calculator System",
        "description": "Create a comprehensive grade management system with multiple students and subjects.",
        "starterCode": "# Grade management system\nstudents = {\n    'Alice': {'Math': 95, 'Science': 88, 'English': 92},\n    'Bob': {'Math': 78, 'Science': 85, 'English': 90},\n    'Carol': {'Math': 88, 'Science': 92, 'English': 85}\n}\n",
        "expectedOutput": "Grade Report:\nAlice - Average: 91.67 (A)\nBob - Average: 84.33 (B)\nCarol - Average: 88.33 (B)\n\nSubject Averages:\nMath: 87.0\nScience: 88.33\nEnglish: 89.0",
        "solution": "students = {\n    'Alice': {'Math': 95, 'Science': 88, 'English': 92},\n    'Bob': {'Math': 78, 'Science': 85, 'English': 90},\n    'Carol': {'Math': 88, 'Science': 92, 'English': 85}\n}\n\n# Calculate student averages\nprint('Grade Report:')\nfor student, grades in students.items():\n    average = sum(grades.values()) / len(grades)\n    if average >= 90:\n        letter_grade = 'A'\n    elif average >= 80:\n        letter_grade = 'B'\n    elif average >= 70:\n        letter_grade = 'C'\n    else:\n        letter_grade = 'F'\n    print(f'{student} - Average: {average:.2f} ({letter_grade})')\n\n# Calculate subject averages\nprint('\\nSubject Averages:')\nsubjects = ['Math', 'Science', 'English']\nfor subject in subjects:\n    total = sum(student_grades[subject] for student_grades in students.values())\n    average = total / len(students)\n    print(f'{subject}: {average:.2f}')"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "How do you access a value in a dictionary named 'data' with key 'name'?",
        "type": "multiple-choice",
        "options": ["data.name", "data['name']", "data(name)", "data->name"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "What method safely gets a value from a dictionary without causing an error if the key doesn't exist?",
        "type": "multiple-choice",
        "options": ["dict.safe()", "dict.get()", "dict.find()", "dict.check()"],
        "correctAnswer": 1
      },
      {
        "id": "q3",
        "question": "Which method returns all key-value pairs as tuples?",
        "type": "multiple-choice",
        "options": ["dict.keys()", "dict.values()", "dict.items()", "dict.pairs()"],
        "correctAnswer": 2
      }
    ]
  },
  {
    "id": "python-oop-basics",
    "title": "Object-Oriented Programming Basics",
    "description": "Learn to create classes and objects to organize and structure your code.",
    "category": "Object-Oriented Programming",
    "difficulty": "advanced",
    "estimatedTime": 45,
    "xpReward": 80,
    "prerequisites": ["python-dictionaries"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "What is Object-Oriented Programming?",
        "content": "Object-Oriented Programming (OOP) is a programming paradigm that organizes code around objects and classes. A class is a blueprint for creating objects, and objects are instances of classes. OOP helps create more maintainable, reusable, and organized code through encapsulation, inheritance, and polymorphism."
      },
      {
        "id": "step-2",
        "type": "code",
        "title": "Creating Classes and Objects",
        "content": "Define classes with the 'class' keyword and create objects (instances):",
        "code": "# Define a simple class\nclass Person:\n    def __init__(self, name, age):\n        self.name = name  # Instance attribute\n        self.age = age\n    \n    def introduce(self):  # Instance method\n        return f'Hi, I am {self.name}, {self.age} years old'\n    \n    def have_birthday(self):\n        self.age += 1\n        return f'{self.name} is now {self.age} years old'\n\n# Create objects (instances)\nperson1 = Person('Alice', 25)\nperson2 = Person('Bob', 30)\n\nprint(person1.introduce())\nprint(person2.have_birthday())",
        "language": "python"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "Class Attributes and Methods",
        "content": "Classes can have attributes and methods shared by all instances:",
        "code": "class BankAccount:\n    # Class attribute (shared by all instances)\n    bank_name = 'PyBank'\n    total_accounts = 0\n    \n    def __init__(self, owner, balance=0):\n        self.owner = owner  # Instance attribute\n        self.balance = balance\n        BankAccount.total_accounts += 1  # Update class attribute\n        self.account_number = BankAccount.total_accounts\n    \n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            return f'Deposited ${amount}. New balance: ${self.balance}'\n        return 'Invalid deposit amount'\n    \n    def withdraw(self, amount):\n        if 0 < amount <= self.balance:\n            self.balance -= amount\n            return f'Withdrew ${amount}. New balance: ${self.balance}'\n        return 'Insufficient funds or invalid amount'\n    \n    @classmethod\n    def get_total_accounts(cls):\n        return f'Total accounts: {cls.total_accounts}'\n\n# Create accounts\naccount1 = BankAccount('Alice', 1000)\naccount2 = BankAccount('Bob', 500)\n\nprint(account1.deposit(200))\nprint(BankAccount.get_total_accounts())",
        "language": "python"
      },
      {
        "id": "step-4",
        "type": "code",
        "title": "Inheritance and Method Overriding",
        "content": "Create specialized classes that inherit from base classes:",
        "code": "# Base class\nclass Vehicle:\n    def __init__(self, brand, model, year):\n        self.brand = brand\n        self.model = model\n        self.year = year\n    \n    def start(self):\n        return f'{self.brand} {self.model} is starting...'\n    \n    def stop(self):\n        return f'{self.brand} {self.model} has stopped.'\n\n# Derived class (inherits from Vehicle)\nclass Car(Vehicle):\n    def __init__(self, brand, model, year, doors):\n        super().__init__(brand, model, year)  # Call parent constructor\n        self.doors = doors\n    \n    def honk(self):\n        return 'Beep beep!'\n    \n    # Override parent method\n    def start(self):\n        return f'{self.brand} {self.model} car is starting with a roar!'\n\nclass Motorcycle(Vehicle):\n    def __init__(self, brand, model, year, engine_size):\n        super().__init__(brand, model, year)\n        self.engine_size = engine_size\n    \n    def rev_engine(self):\n        return 'Vroom vroom!'\n\n# Create instances\nmy_car = Car('Toyota', 'Camry', 2022, 4)\nmy_bike = Motorcycle('Harley', 'Sportster', 2021, 883)\n\nprint(my_car.start())  # Uses overridden method\nprint(my_bike.start())  # Uses inherited method\nprint(my_car.honk())",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Rectangle Class",
        "description": "Create a Rectangle class with width, height, and methods to calculate area and perimeter.",
        "starterCode": "# Create Rectangle class\nclass Rectangle:\n    def __init__(self, width, height):\n        # Your code here\n        pass\n    \n    def area(self):\n        # Your code here\n        pass\n    \n    def perimeter(self):\n        # Your code here\n        pass\n\n# Test the class\nrect = Rectangle(5, 3)\n",
        "expectedOutput": "Area: 15\nPerimeter: 16",
        "solution": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height\n    \n    def perimeter(self):\n        return 2 * (self.width + self.height)\n\nrect = Rectangle(5, 3)\nprint(f'Area: {rect.area()}')\nprint(f'Perimeter: {rect.perimeter()}')"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "Library Book System",
        "description": "Create a Book class and Library class to manage a collection of books.",
        "starterCode": "# Book and Library management system\nclass Book:\n    def __init__(self, title, author, isbn):\n        # Your code here\n        pass\n\nclass Library:\n    def __init__(self):\n        # Your code here\n        pass\n    \n    def add_book(self, book):\n        # Your code here\n        pass\n    \n    def find_book(self, title):\n        # Your code here\n        pass\n\n# Test the system\nlib = Library()\nbook1 = Book('1984', 'George Orwell', '123456789')\n",
        "expectedOutput": "Added: 1984 by George Orwell\nFound: 1984 by George Orwell (ISBN: 123456789)\nTotal books: 1",
        "solution": "class Book:\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n    \n    def __str__(self):\n        return f'{self.title} by {self.author} (ISBN: {self.isbn})'\n\nclass Library:\n    def __init__(self):\n        self.books = []\n    \n    def add_book(self, book):\n        self.books.append(book)\n        return f'Added: {book.title} by {book.author}'\n    \n    def find_book(self, title):\n        for book in self.books:\n            if book.title.lower() == title.lower():\n                return f'Found: {book}'\n        return 'Book not found'\n    \n    def total_books(self):\n        return len(self.books)\n\nlib = Library()\nbook1 = Book('1984', 'George Orwell', '123456789')\nprint(lib.add_book(book1))\nprint(lib.find_book('1984'))\nprint(f'Total books: {lib.total_books()}')"
      },
      {
        "id": "hard-1",
        "difficulty": "Hard",
        "title": "Employee Management System",
        "description": "Create an inheritance hierarchy with Employee base class and specialized Manager and Developer classes.",
        "starterCode": "# Employee management system with inheritance\nclass Employee:\n    def __init__(self, name, employee_id, salary):\n        # Your code here\n        pass\n\nclass Manager(Employee):\n    def __init__(self, name, employee_id, salary, department):\n        # Your code here\n        pass\n\nclass Developer(Employee):\n    def __init__(self, name, employee_id, salary, programming_language):\n        # Your code here\n        pass\n\n# Test the system\nmanager = Manager('Alice', 'M001', 75000, 'Engineering')\ndeveloper = Developer('Bob', 'D001', 65000, 'Python')\n",
        "expectedOutput": "Manager: Alice (M001) - $75000 - Engineering Department\nDeveloper: Bob (D001) - $65000 - Python Specialist\nAlice's annual bonus: $7500\nBob's coding skill: Expert in Python",
        "solution": "class Employee:\n    def __init__(self, name, employee_id, salary):\n        self.name = name\n        self.employee_id = employee_id\n        self.salary = salary\n    \n    def get_info(self):\n        return f'{self.name} ({self.employee_id}) - ${self.salary}'\n    \n    def calculate_bonus(self):\n        return self.salary * 0.05  # 5% bonus\n\nclass Manager(Employee):\n    def __init__(self, name, employee_id, salary, department):\n        super().__init__(name, employee_id, salary)\n        self.department = department\n    \n    def get_info(self):\n        return f'Manager: {super().get_info()} - {self.department} Department'\n    \n    def calculate_bonus(self):\n        return self.salary * 0.10  # 10% bonus for managers\n\nclass Developer(Employee):\n    def __init__(self, name, employee_id, salary, programming_language):\n        super().__init__(name, employee_id, salary)\n        self.programming_language = programming_language\n    \n    def get_info(self):\n        return f'Developer: {super().get_info()} - {self.programming_language} Specialist'\n    \n    def code_skill(self):\n        return f'Expert in {self.programming_language}'\n\nmanager = Manager('Alice', 'M001', 75000, 'Engineering')\ndeveloper = Developer('Bob', 'D001', 65000, 'Python')\n\nprint(manager.get_info())\nprint(developer.get_info())\nprint(f'{manager.name}\\'s annual bonus: ${manager.calculate_bonus():.0f}')\nprint(f'{developer.name}\\'s coding skill: {developer.code_skill()}')"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "What method is automatically called when creating a new object?",
        "type": "multiple-choice",
        "options": ["__create__", "__init__", "__new__", "__start__"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "What keyword is used to inherit from a parent class?",
        "type": "multiple-choice",
        "options": ["extends", "inherits", "class ChildClass(ParentClass):", "implements"],
        "correctAnswer": 2
      },
      {
        "id": "q3",
        "question": "What is 'self' in Python class methods?",
        "type": "multiple-choice",
        "options": ["A keyword", "A reference to the current instance", "A built-in function", "A class attribute"],
        "correctAnswer": 1
      }
    ]
  },
  {
    "id": "python-loops",
    "title": "Loops and Iteration",
    "description": "Master for and while loops to repeat code efficiently and handle collections.",
    "category": "Control Flow",
    "difficulty": "intermediate",
    "estimatedTime": 25,
    "xpReward": 50,
    "prerequisites": ["python-variables"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "Understanding Loops",
        "content": "Loops allow you to repeat code multiple times without writing it repeatedly. Python has two main types: 'for' loops (when you know how many times to repeat or iterate over collections) and 'while' loops (when you repeat until a condition changes). Loops are essential for processing data, automating tasks, and creating interactive programs."
      },
      {
        "id": "step-2",
        "type": "code",
        "title": "For Loops with Range and Collections",
        "content": "The most versatile way to repeat code:",
        "code": "# Basic for loop with range\nfor i in range(5):\n    print(f'Count: {i}')\n\n# Range with start, stop, step\nfor num in range(2, 11, 2):\n    print(f'Even: {num}')\n\n# Iterate over lists\nfruits = ['apple', 'banana', 'orange']\nfor fruit in fruits:\n    print(f'I like {fruit}')\n\n# Enumerate for index and value\nfor index, fruit in enumerate(fruits):\n    print(f'{index}: {fruit}')",
        "language": "python"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "While Loops and Loop Control",
        "content": "While loops and controlling loop execution:",
        "code": "# Basic while loop\ncount = 0\nwhile count < 5:\n    print(f'Count: {count}')\n    count += 1\n\n# Break - exit loop early\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)\nprint('Loop ended early')\n\n# Continue - skip current iteration\nfor i in range(5):\n    if i == 2:\n        continue\n    print(f'Processing: {i}')\n\n# Nested loops\nfor row in range(3):\n    for col in range(3):\n        print(f'({row},{col})', end=' ')\n    print()  # New line after each row",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Sum Calculator",
        "description": "Use a loop to calculate the sum of numbers from 1 to 10.",
        "starterCode": "# Calculate sum of numbers 1 to 10\ntotal = 0\n",
        "expectedOutput": "Sum of 1 to 10: 55",
        "solution": "total = 0\nfor i in range(1, 11):\n    total += i\nprint(f'Sum of 1 to 10: {total}')"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "Password Validator Loop",
        "description": "Keep asking for a password until it meets requirements (at least 8 characters).",
        "starterCode": "# Password validation loop\npasswords = ['123', 'short', 'validpassword123']\npassword_index = 0\n",
        "expectedOutput": "Password too short, try again.\nPassword too short, try again.\nPassword accepted!",
        "solution": "passwords = ['123', 'short', 'validpassword123']\npassword_index = 0\n\nwhile password_index < len(passwords):\n    password = passwords[password_index]\n    if len(password) >= 8:\n        print('Password accepted!')\n        break\n    else:\n        print('Password too short, try again.')\n    password_index += 1"
      },
      {
        "id": "hard-1",
        "difficulty": "Hard",
        "title": "Pattern Generator",
        "description": "Create a program that generates number patterns using nested loops.",
        "starterCode": "# Generate number patterns\nrows = 4\n",
        "expectedOutput": "1\n1 2\n1 2 3\n1 2 3 4",
        "solution": "rows = 4\n\nfor i in range(1, rows + 1):\n    for j in range(1, i + 1):\n        print(j, end=' ')\n    print()  # New line after each row"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "What does range(1, 6) generate?",
        "type": "multiple-choice",
        "options": ["[1, 2, 3, 4, 5, 6]", "[1, 2, 3, 4, 5]", "[0, 1, 2, 3, 4, 5]", "[2, 3, 4, 5, 6]"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "What does the 'break' statement do?",
        "type": "multiple-choice",
        "options": ["Skips current iteration", "Exits the loop completely", "Pauses the loop", "Restarts the loop"],
        "correctAnswer": 1
      }
    ]
  },
  {
    "id": "python-functions",
    "title": "Functions and Code Organization",
    "description": "Create reusable code blocks with functions, parameters, and return values.",
    "category": "Functions",
    "difficulty": "intermediate",
    "estimatedTime": 35,
    "xpReward": 65,
    "prerequisites": ["python-loops"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "Why Functions Matter",
        "content": "Functions are the building blocks of organized, maintainable code. They allow you to break complex problems into smaller, manageable pieces, avoid code repetition, and create reusable components. Functions make your code more readable, testable, and easier to debug."
      },
      {
        "id": "step-2",
        "type": "code",
        "title": "Creating and Calling Functions",
        "content": "Basic function syntax and usage:",
        "code": "# Simple function\ndef greet():\n    print('Hello, World!')\n\n# Function with parameters\ndef greet_person(name, age=25):\n    return f'Hello {name}, you are {age} years old'\n\n# Function with multiple return values\ndef calculate_stats(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return total, average\n\n# Call functions\ngreet()\nmessage = greet_person('Alice')\nprint(message)\n\ntotal, avg = calculate_stats([1, 2, 3, 4, 5])\nprint(f'Total: {total}, Average: {avg}')",
        "language": "python"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "Advanced Function Features",
        "content": "Variable arguments, keyword arguments, and lambda functions:",
        "code": "# Variable arguments\ndef sum_all(*numbers):\n    return sum(numbers)\n\n# Keyword arguments\ndef create_profile(**kwargs):\n    profile = {}\n    for key, value in kwargs.items():\n        profile[key] = value\n    return profile\n\n# Lambda functions (anonymous functions)\nsquare = lambda x: x ** 2\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(square, numbers))\n\n# Function as argument\ndef apply_operation(numbers, operation):\n    return [operation(x) for x in numbers]\n\nprint(sum_all(1, 2, 3, 4, 5))\nprint(create_profile(name='Alice', age=25, city='NYC'))\nprint(squared)\nprint(apply_operation([1, 2, 3], lambda x: x * 2))",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Temperature Converter",
        "description": "Create functions to convert between Celsius and Fahrenheit.",
        "starterCode": "# Temperature conversion functions\ndef celsius_to_fahrenheit(celsius):\n    # Your code here\n    pass\n\ndef fahrenheit_to_celsius(fahrenheit):\n    # Your code here\n    pass\n\n# Test\ntemp_c = 25\ntemp_f = 77\n",
        "expectedOutput": "25°C = 77.0°F\n77°F = 25.0°C",
        "solution": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5/9\n\ntemp_c = 25\ntemp_f = 77\n\nprint(f'{temp_c}°C = {celsius_to_fahrenheit(temp_c)}°F')\nprint(f'{temp_f}°F = {fahrenheit_to_celsius(temp_f)}°C')"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "Grade Calculator",
        "description": "Create a function that calculates letter grades with multiple scoring criteria.",
        "starterCode": "# Grade calculation system\ndef calculate_grade(homework, quizzes, midterm, final):\n    # Weights: homework 25%, quizzes 25%, midterm 25%, final 25%\n    pass\n\ndef get_letter_grade(percentage):\n    # A: 90+, B: 80-89, C: 70-79, D: 60-69, F: <60\n    pass\n\n# Test\nstudent_scores = (85, 90, 78, 92)\n",
        "expectedOutput": "Final Grade: 86.25%\nLetter Grade: B",
        "solution": "def calculate_grade(homework, quizzes, midterm, final):\n    weights = [0.25, 0.25, 0.25, 0.25]\n    scores = [homework, quizzes, midterm, final]\n    total = sum(score * weight for score, weight in zip(scores, weights))\n    return total\n\ndef get_letter_grade(percentage):\n    if percentage >= 90:\n        return 'A'\n    elif percentage >= 80:\n        return 'B'\n    elif percentage >= 70:\n        return 'C'\n    elif percentage >= 60:\n        return 'D'\n    else:\n        return 'F'\n\nstudent_scores = (85, 90, 78, 92)\nfinal_grade = calculate_grade(*student_scores)\nletter = get_letter_grade(final_grade)\n\nprint(f'Final Grade: {final_grade}%')\nprint(f'Letter Grade: {letter}')"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "What keyword defines a function in Python?",
        "type": "multiple-choice",
        "options": ["function", "def", "define", "func"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "What does *args allow in a function?",
        "type": "multiple-choice",
        "options": ["Multiple keyword arguments", "Variable number of positional arguments", "Default arguments", "Return multiple values"],
        "correctAnswer": 1
      }
    ]
  },
  {
    "id": "python-file-handling",
    "title": "File Input and Output",
    "description": "Learn to read from and write to files for data persistence and processing.",
    "category": "File Operations",
    "difficulty": "advanced",
    "estimatedTime": 40,
    "xpReward": 70,
    "prerequisites": ["python-functions"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "Why File Handling Matters",
        "content": "File handling allows your programs to persist data beyond program execution, process large datasets, create logs, read configuration files, and interact with external data sources. It's essential for building real-world applications that need to store and retrieve information."
      },
      {
        "id": "step-2",
        "type": "code",
        "title": "Reading and Writing Files",
        "content": "Basic file operations using context managers:",
        "code": "# Writing to a file\nwith open('example.txt', 'w') as file:\n    file.write('Hello, World!\\n')\n    file.write('This is a Python file handling example.\\n')\n    file.writelines(['Line 3\\n', 'Line 4\\n'])\n\n# Reading from a file\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print('Full content:')\n    print(content)\n\n# Reading line by line\nwith open('example.txt', 'r') as file:\n    print('Line by line:')\n    for line_number, line in enumerate(file, 1):\n        print(f'{line_number}: {line.strip()}')",
        "language": "python"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "Working with CSV and JSON Files",
        "content": "Handle structured data formats:",
        "code": "import json\nimport csv\nfrom io import StringIO\n\n# Working with JSON\ndata = {\n    'students': [\n        {'name': 'Alice', 'grade': 85},\n        {'name': 'Bob', 'grade': 92}\n    ]\n}\n\n# Write JSON\nwith open('students.json', 'w') as file:\n    json.dump(data, file, indent=2)\n\n# Read JSON\nwith open('students.json', 'r') as file:\n    loaded_data = json.load(file)\n    print('JSON data:', loaded_data)\n\n# Working with CSV (simulated)\ncsv_content = 'name,age,city\\nAlice,25,NYC\\nBob,30,LA'\ncsv_file = StringIO(csv_content)\n\nreader = csv.DictReader(csv_file)\nprint('CSV data:')\nfor row in reader:\n    print(f'{row[\"name\"]} is {row[\"age\"]} years old from {row[\"city\"]}')",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Simple Log Writer",
        "description": "Create a function that writes log messages to a file with timestamps.",
        "starterCode": "# Log writing function\nimport datetime\n\ndef write_log(message, log_file='app.log'):\n    # Your code here\n    pass\n\n# Test\nwrite_log('Application started')\nwrite_log('User logged in')\n",
        "expectedOutput": "Log written to app.log\nLog written to app.log",
        "solution": "import datetime\n\ndef write_log(message, log_file='app.log'):\n    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    log_entry = f'{timestamp} - {message}\\n'\n    \n    with open(log_file, 'a') as file:\n        file.write(log_entry)\n    \n    return f'Log written to {log_file}'\n\nprint(write_log('Application started'))\nprint(write_log('User logged in'))"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "Student Grade Manager",
        "description": "Create a system to save and load student grades from a JSON file.",
        "starterCode": "# Student grade management\nimport json\n\ndef save_grades(students, filename='grades.json'):\n    # Your code here\n    pass\n\ndef load_grades(filename='grades.json'):\n    # Your code here\n    pass\n\n# Test data\nstudents = {\n    'Alice': {'math': 85, 'science': 92},\n    'Bob': {'math': 78, 'science': 88}\n}\n",
        "expectedOutput": "Grades saved successfully\nLoaded grades: {'Alice': {'math': 85, 'science': 92}, 'Bob': {'math': 78, 'science': 88}}",
        "solution": "import json\n\ndef save_grades(students, filename='grades.json'):\n    try:\n        with open(filename, 'w') as file:\n            json.dump(students, file, indent=2)\n        return 'Grades saved successfully'\n    except Exception as e:\n        return f'Error saving grades: {e}'\n\ndef load_grades(filename='grades.json'):\n    try:\n        with open(filename, 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        return {}\n    except Exception as e:\n        return f'Error loading grades: {e}'\n\nstudents = {\n    'Alice': {'math': 85, 'science': 92},\n    'Bob': {'math': 78, 'science': 88}\n}\n\nprint(save_grades(students))\nloaded = load_grades()\nprint(f'Loaded grades: {loaded}')"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "What is the recommended way to open files in Python?",
        "type": "multiple-choice",
        "options": ["open('file.txt')", "with open('file.txt') as f:", "file = open('file.txt')", "File.open('file.txt')"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "Which mode opens a file for writing (overwrites existing content)?",
        "type": "multiple-choice",
        "options": ["'r'", "'w'", "'a'", "'x'"],
        "correctAnswer": 1
      }
    ]
  },
  {
    "id": "python-error-handling",
    "title": "Exception Handling and Debugging",
    "description": "Learn to handle errors gracefully and debug your Python programs effectively.",
    "category": "Error Handling",
    "difficulty": "advanced",
    "estimatedTime": 35,
    "xpReward": 75,
    "prerequisites": ["python-file-handling"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "Understanding Exceptions",
        "content": "Exceptions are events that occur during program execution that disrupt normal flow. Python uses try-except blocks to handle exceptions gracefully, preventing crashes and providing meaningful error messages to users. Good exception handling makes your programs robust and user-friendly."
      },
      {
        "id": "step-2",
        "type": "code",
        "title": "Basic Exception Handling",
        "content": "Using try-except blocks to handle errors:",
        "code": "# Basic exception handling\ntry:\n    number = int(input('Enter a number: '))\n    result = 10 / number\n    print(f'Result: {result}')\nexcept ValueError:\n    print('Invalid input! Please enter a valid number.')\nexcept ZeroDivisionError:\n    print('Cannot divide by zero!')\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}')\nelse:\n    print('Operation completed successfully!')\nfinally:\n    print('This always executes.')\n\n# Multiple exceptions in one block\ntry:\n    data = {'name': 'Alice'}\n    print(data['age'])  # KeyError\nexcept (KeyError, ValueError, TypeError) as e:\n    print(f'Error accessing data: {e}')",
        "language": "python"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "Custom Exceptions and Advanced Handling",
        "content": "Creating custom exceptions and advanced error handling patterns:",
        "code": "# Custom exception classes\nclass ValidationError(Exception):\n    def __init__(self, message, error_code=None):\n        super().__init__(message)\n        self.error_code = error_code\n\nclass PasswordTooShortError(ValidationError):\n    pass\n\ndef validate_password(password):\n    if len(password) < 8:\n        raise PasswordTooShortError('Password must be at least 8 characters', 'PWD_001')\n    if not any(c.isupper() for c in password):\n        raise ValidationError('Password must contain uppercase letter', 'PWD_002')\n    return True\n\n# Using custom exceptions\npasswords = ['weak', 'NOUPPERCASE', 'ValidPass123']\n\nfor pwd in passwords:\n    try:\n        validate_password(pwd)\n        print(f'Password \"{pwd}\" is valid')\n    except PasswordTooShortError as e:\n        print(f'Short password error: {e} (Code: {e.error_code})')\n    except ValidationError as e:\n        print(f'Validation error: {e} (Code: {e.error_code})')",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Safe Calculator",
        "description": "Create a calculator function that handles division by zero and invalid inputs.",
        "starterCode": "# Safe calculator function\ndef safe_divide(a, b):\n    # Your code here\n    pass\n\n# Test cases\ntest_cases = [(10, 2), (10, 0), ('abc', 5), (10, 'def')]\n",
        "expectedOutput": "10 / 2 = 5.0\nError: Cannot divide by zero\nError: Invalid input type\nError: Invalid input type",
        "solution": "def safe_divide(a, b):\n    try:\n        result = a / b\n        return f'{a} / {b} = {result}'\n    except ZeroDivisionError:\n        return 'Error: Cannot divide by zero'\n    except TypeError:\n        return 'Error: Invalid input type'\n    except Exception as e:\n        return f'Error: {e}'\n\ntest_cases = [(10, 2), (10, 0), ('abc', 5), (10, 'def')]\n\nfor a, b in test_cases:\n    print(safe_divide(a, b))"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "File Reader with Error Handling",
        "description": "Create a robust file reading function that handles various file-related errors.",
        "starterCode": "# Robust file reader\ndef read_file_safely(filename):\n    # Handle FileNotFoundError, PermissionError, etc.\n    pass\n\n# Test files\nfiles = ['existing.txt', 'nonexistent.txt', '/restricted/file.txt']\n",
        "expectedOutput": "Successfully read existing.txt\nError: File 'nonexistent.txt' not found\nError: Permission denied for '/restricted/file.txt'",
        "solution": "def read_file_safely(filename):\n    try:\n        with open(filename, 'r') as file:\n            content = file.read()\n            return f'Successfully read {filename}'\n    except FileNotFoundError:\n        return f'Error: File \\'{filename}\\' not found'\n    except PermissionError:\n        return f'Error: Permission denied for \\'{filename}\\''\n    except IsADirectoryError:\n        return f'Error: \\'{filename}\\' is a directory, not a file'\n    except Exception as e:\n        return f'Error reading \\'{filename}\\': {e}'\n\nfiles = ['existing.txt', 'nonexistent.txt', '/restricted/file.txt']\n\n# Create a test file first\ntry:\n    with open('existing.txt', 'w') as f:\n        f.write('Test content')\nexcept:\n    pass\n\nfor filename in files:\n    print(read_file_safely(filename))"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "Which keyword is used to handle exceptions in Python?",
        "type": "multiple-choice",
        "options": ["catch", "except", "handle", "error"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "What block always executes regardless of whether an exception occurs?",
        "type": "multiple-choice",
        "options": ["else", "except", "finally", "always"],
        "correctAnswer": 2
      }
    ]
  },
  {
    "id": "python-modules",
    "title": "Modules and Packages",
    "description": "Organize code with modules, import libraries, and create reusable packages.",
    "category": "Code Organization",
    "difficulty": "advanced",
    "estimatedTime": 30,
    "xpReward": 65,
    "prerequisites": ["python-error-handling"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "Understanding Modules",
        "content": "Modules are Python files containing definitions and statements that can be imported and used in other programs. They help organize code, avoid naming conflicts, and promote code reuse. Python has a rich standard library of built-in modules, and you can also create your own modules."
      },
      {
        "id": "step-2",
        "type": "code",
        "title": "Importing and Using Modules",
        "content": "Different ways to import and use modules:",
        "code": "# Standard library modules\nimport math\nimport datetime\nimport random\nfrom collections import Counter, defaultdict\nimport os\n\n# Using imported modules\nprint(f'Pi: {math.pi}')\nprint(f'Square root of 16: {math.sqrt(16)}')\n\n# Current date and time\nnow = datetime.datetime.now()\nprint(f'Current time: {now.strftime(\"%Y-%m-%d %H:%M:%S\")}')\n\n# Random numbers\nprint(f'Random number: {random.randint(1, 100)}')\nprint(f'Random choice: {random.choice([\"apple\", \"banana\", \"cherry\"])}')\n\n# Collections\nwords = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\nword_count = Counter(words)\nprint(f'Word frequency: {word_count}')\n\n# Environment and system\nprint(f'Current directory: {os.getcwd()}')\nprint(f'Environment PATH: {os.environ.get(\"PATH\", \"Not found\")[:50]}...')",
        "language": "python"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "Creating Custom Modules",
        "content": "How to create and organize your own modules:",
        "code": "# Example of a custom module (math_utils.py)\n# This would typically be in a separate file\n\ndef calculate_area(shape, **kwargs):\n    \"\"\"Calculate area of different shapes.\"\"\"\n    if shape == 'rectangle':\n        return kwargs['length'] * kwargs['width']\n    elif shape == 'circle':\n        import math\n        return math.pi * kwargs['radius'] ** 2\n    elif shape == 'triangle':\n        return 0.5 * kwargs['base'] * kwargs['height']\n    else:\n        raise ValueError(f'Unknown shape: {shape}')\n\ndef factorial(n):\n    \"\"\"Calculate factorial of n.\"\"\"\n    if n < 0:\n        raise ValueError('Factorial not defined for negative numbers')\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nclass Calculator:\n    \"\"\"Simple calculator class.\"\"\"\n    \n    def __init__(self):\n        self.history = []\n    \n    def add(self, a, b):\n        result = a + b\n        self.history.append(f'{a} + {b} = {result}')\n        return result\n    \n    def get_history(self):\n        return self.history\n\n# If this were imported, you could use:\n# from math_utils import calculate_area, Calculator\n# Or: import math_utils\n\n# Demonstrating usage\nprint(f'Rectangle area: {calculate_area(\"rectangle\", length=5, width=3)}')\nprint(f'Circle area: {calculate_area(\"circle\", radius=2):.2f}')\nprint(f'Factorial of 5: {factorial(5)}')\n\ncalc = Calculator()\nprint(f'5 + 3 = {calc.add(5, 3)}')\nprint(f'History: {calc.get_history()}')",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Date and Time Utilities",
        "description": "Use the datetime module to create date formatting functions.",
        "starterCode": "# Date and time utilities\nimport datetime\n\ndef format_date(date_obj):\n    # Format as 'January 15, 2024'\n    pass\n\ndef days_until_birthday(birthday_str):\n    # Calculate days until next birthday\n    # birthday_str format: 'MM-DD' (e.g., '03-15')\n    pass\n\n# Test\ntoday = datetime.date.today()\nbirthday = '03-15'\n",
        "expectedOutput": "Today: January 15, 2024\nDays until birthday: 59",
        "solution": "import datetime\n\ndef format_date(date_obj):\n    return date_obj.strftime('%B %d, %Y')\n\ndef days_until_birthday(birthday_str):\n    today = datetime.date.today()\n    month, day = map(int, birthday_str.split('-'))\n    \n    # This year's birthday\n    this_year_birthday = datetime.date(today.year, month, day)\n    \n    # If birthday has passed this year, calculate for next year\n    if this_year_birthday < today:\n        next_birthday = datetime.date(today.year + 1, month, day)\n    else:\n        next_birthday = this_year_birthday\n    \n    delta = next_birthday - today\n    return delta.days\n\ntoday = datetime.date.today()\nbirthday = '03-15'\n\nprint(f'Today: {format_date(today)}')\nprint(f'Days until birthday: {days_until_birthday(birthday)}')"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "Statistics Module",
        "description": "Create a statistics module with functions for mean, median, and mode.",
        "starterCode": "# Statistics module functions\nfrom collections import Counter\n\ndef calculate_mean(numbers):\n    # Calculate arithmetic mean\n    pass\n\ndef calculate_median(numbers):\n    # Calculate median value\n    pass\n\ndef calculate_mode(numbers):\n    # Calculate mode (most frequent value)\n    pass\n\ndef get_statistics(numbers):\n    # Return all statistics as a dictionary\n    pass\n\n# Test data\ndata = [1, 2, 2, 3, 4, 4, 4, 5]\n",
        "expectedOutput": "Statistics for [1, 2, 2, 3, 4, 4, 4, 5]:\nMean: 3.125\nMedian: 3.5\nMode: 4\nFull stats: {'mean': 3.125, 'median': 3.5, 'mode': 4, 'count': 8}",
        "solution": "from collections import Counter\n\ndef calculate_mean(numbers):\n    return sum(numbers) / len(numbers)\n\ndef calculate_median(numbers):\n    sorted_nums = sorted(numbers)\n    n = len(sorted_nums)\n    if n % 2 == 0:\n        return (sorted_nums[n//2 - 1] + sorted_nums[n//2]) / 2\n    else:\n        return sorted_nums[n//2]\n\ndef calculate_mode(numbers):\n    counter = Counter(numbers)\n    max_count = max(counter.values())\n    modes = [num for num, count in counter.items() if count == max_count]\n    return modes[0] if len(modes) == 1 else modes\n\ndef get_statistics(numbers):\n    return {\n        'mean': calculate_mean(numbers),\n        'median': calculate_median(numbers),\n        'mode': calculate_mode(numbers),\n        'count': len(numbers)\n    }\n\ndata = [1, 2, 2, 3, 4, 4, 4, 5]\n\nprint(f'Statistics for {data}:')\nprint(f'Mean: {calculate_mean(data)}')\nprint(f'Median: {calculate_median(data)}')\nprint(f'Mode: {calculate_mode(data)}')\nprint(f'Full stats: {get_statistics(data)}')"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "How do you import only specific functions from a module?",
        "type": "multiple-choice",
        "options": ["import module.function", "from module import function", "import function from module", "module.import(function)"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "What is the purpose of the __name__ == '__main__' check?",
        "type": "multiple-choice",
        "options": ["To check if the file is being run directly", "To import modules", "To define functions", "To handle errors"],
        "correctAnswer": 0
      }
    ]
  },
  {
    "id": "algorithms-intro",
    "title": "Introduction to Algorithms",
    "description": "Learn fundamental algorithms and computational thinking principles.",
    "category": "Algorithms",
    "difficulty": "advanced",
    "estimatedTime": 25,
    "xpReward": 100,
    "prerequisites": ["python-functions", "python-loops", "python-conditionals"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "What are Algorithms?",
        "content": "An algorithm is a step-by-step procedure for solving a problem or completing a task. In programming, algorithms are the logical foundations that enable computers to process data efficiently. Think of an algorithm as a recipe - it provides clear instructions to achieve a desired outcome.\n\nKey characteristics of good algorithms:\n• Clear and unambiguous steps\n• Finite - they must eventually terminate\n• Effective - each step must be achievable\n• Input and output defined\n• Efficient - uses resources optimally"
      },
      {
        "id": "step-2",
        "type": "content",
        "title": "Algorithm Complexity",
        "content": "Algorithm complexity measures how efficiently an algorithm uses time and space as input size grows:\n\n• Time Complexity: How execution time increases with input size\n• Space Complexity: How memory usage increases with input size\n\nCommon complexity notations:\n• O(1) - Constant time\n• O(log n) - Logarithmic time\n• O(n) - Linear time\n• O(n²) - Quadratic time\n• O(2ⁿ) - Exponential time"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "Linear Search Algorithm",
        "content": "Linear search checks each element sequentially until finding the target:",
        "code": "def linear_search(arr, target):\n    \"\"\"\n    Search for target in array using linear search\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i  # Return index if found\n    return -1  # Return -1 if not found\n\n# Example usage\nnumbers = [3, 7, 1, 9, 4, 6, 2]\ntarget = 9\n\nresult = linear_search(numbers, target)\nif result != -1:\n    print(f\"Found {target} at index {result}\")\nelse:\n    print(f\"{target} not found in the array\")",
        "language": "python"
      },
      {
        "id": "step-4",
        "type": "code",
        "title": "Binary Search Algorithm",
        "content": "Binary search works on sorted arrays by repeatedly dividing the search space:",
        "code": "def binary_search(arr, target):\n    \"\"\"\n    Search for target in sorted array using binary search\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\n# Example usage\nsorted_numbers = [1, 2, 3, 4, 6, 7, 9]\ntarget = 6\n\nresult = binary_search(sorted_numbers, target)\nprint(f\"Binary search result: {result}\")\n\n# Compare with linear search\nprint(f\"Linear search result: {linear_search(sorted_numbers, target)}\")",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Find Maximum",
        "description": "Write a function to find the maximum element in a list.",
        "starterCode": "def find_maximum(numbers):\n    # Write your algorithm here\n    pass\n\n# Test your function\ntest_list = [3, 7, 1, 9, 4, 6, 2]\nprint(find_maximum(test_list))",
        "expectedOutput": "9",
        "solution": "def find_maximum(numbers):\n    if not numbers:\n        return None\n    \n    max_val = numbers[0]\n    for num in numbers[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "Bubble Sort",
        "description": "Implement the bubble sort algorithm to sort a list in ascending order.",
        "starterCode": "def bubble_sort(arr):\n    # Implement bubble sort algorithm\n    pass\n\n# Test your function\ntest_array = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(test_array)\nprint(test_array)",
        "expectedOutput": "[11, 12, 22, 25, 34, 64, 90]",
        "solution": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]"
      },
      {
        "id": "hard-1",
        "difficulty": "Hard",
        "title": "Fibonacci with Memoization",
        "description": "Implement an efficient Fibonacci function using memoization to avoid redundant calculations.",
        "starterCode": "def fibonacci_memo(n, memo={}):\n    # Implement memoized Fibonacci\n    pass\n\n# Test your function\nfor i in range(10):\n    print(f\"F({i}) = {fibonacci_memo(i)}\")",
        "expectedOutput": "F(0) = 0\nF(1) = 1\nF(2) = 1\nF(3) = 2\nF(4) = 3\nF(5) = 5\nF(6) = 8\nF(7) = 13\nF(8) = 21\nF(9) = 34",
        "solution": "def fibonacci_memo(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo)\n    return memo[n]"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "What is the time complexity of binary search?",
        "type": "multiple-choice",
        "options": ["O(n)", "O(log n)", "O(n²)", "O(1)"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "Which search algorithm requires the array to be sorted?",
        "type": "multiple-choice",
        "options": ["Linear search", "Binary search", "Both", "Neither"],
        "correctAnswer": 1
      },
      {
        "id": "q3",
        "question": "What does O(1) complexity mean?",
        "type": "multiple-choice",
        "options": ["Takes 1 second", "Executes once", "Constant time regardless of input size", "Linear time"],
        "correctAnswer": 2
      }
    ]
  },
  {
    "id": "web-scraping-intro",
    "title": "Web Scraping Fundamentals",
    "description": "Learn to extract data from websites using Python's powerful scraping libraries.",
    "category": "Web Scraping",
    "difficulty": "advanced",
    "estimatedTime": 30,
    "xpReward": 120,
    "prerequisites": ["python-functions", "python-dictionaries", "python-modules"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "What is Web Scraping?",
        "content": "Web scraping is the process of automatically extracting data from websites. It involves sending HTTP requests to web pages and parsing the HTML content to extract specific information.\n\nCommon use cases:\n• Price monitoring for e-commerce\n• Social media sentiment analysis\n• Research data collection\n• News aggregation\n• Real estate listings\n• Job market analysis\n\nEthical considerations:\n• Respect robots.txt files\n• Don't overload servers with requests\n• Check website terms of service\n• Use rate limiting between requests"
      },
      {
        "id": "step-2",
        "type": "content",
        "title": "Essential Libraries",
        "content": "Python provides powerful libraries for web scraping:\n\n• requests: Make HTTP requests to websites\n• BeautifulSoup: Parse and navigate HTML/XML documents\n• selenium: Automate web browsers for dynamic content\n• scrapy: Full-featured scraping framework\n• pandas: Data manipulation and analysis\n• time: Add delays between requests\n\nNote: In this learning environment, we'll simulate web scraping concepts since we can't install external libraries, but the principles remain the same."
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "HTML Parsing Simulation",
        "content": "Let's simulate parsing HTML content (normally you'd use BeautifulSoup):",
        "code": "# Simulated HTML content (normally from requests.get())\nhtml_content = \"\"\"\n<html>\n<head><title>Sample News Site</title></head>\n<body>\n    <div class=\"article\">\n        <h2>Python Becomes Most Popular Language</h2>\n        <p class=\"author\">By Alice Johnson</p>\n        <p class=\"content\">Python continues to dominate programming surveys...</p>\n        <span class=\"date\">2024-01-15</span>\n    </div>\n    <div class=\"article\">\n        <h2>AI Revolution in Education</h2>\n        <p class=\"author\">By Bob Smith</p>\n        <p class=\"content\">Artificial intelligence is transforming learning...</p>\n        <span class=\"date\">2024-01-14</span>\n    </div>\n</body>\n</html>\n\"\"\"\n\n# Simple HTML parsing function\ndef extract_articles(html):\n    articles = []\n    # Simulate finding article sections\n    lines = html.split('\\n')\n    current_article = {}\n    \n    for line in lines:\n        line = line.strip()\n        if '<h2>' in line:\n            title = line.replace('<h2>', '').replace('</h2>', '')\n            current_article['title'] = title\n        elif 'class=\"author\"' in line:\n            author = line.split('>')[1].split('<')[0]\n            current_article['author'] = author\n        elif 'class=\"date\"' in line:\n            date = line.split('>')[1].split('<')[0]\n            current_article['date'] = date\n            articles.append(current_article.copy())\n            current_article = {}\n    \n    return articles\n\n# Extract and display articles\narticles = extract_articles(html_content)\nfor i, article in enumerate(articles, 1):\n    print(f\"Article {i}:\")\n    print(f\"  Title: {article['title']}\")\n    print(f\"  Author: {article['author']}\")\n    print(f\"  Date: {article['date']}\")\n    print()",
        "language": "python"
      },
      {
        "id": "step-4",
        "type": "code",
        "title": "Data Processing and Storage",
        "content": "After scraping, you typically need to clean and store the data:",
        "code": "import json\nfrom datetime import datetime\n\n# Sample scraped data\nscraped_data = [\n    {'title': 'Python Becomes Most Popular Language', 'author': 'Alice Johnson', 'date': '2024-01-15'},\n    {'title': 'AI Revolution in Education', 'author': 'Bob Smith', 'date': '2024-01-14'},\n    {'title': 'Machine Learning Trends', 'author': 'Carol Wilson', 'date': '2024-01-13'}\n]\n\ndef clean_and_process_data(articles):\n    cleaned_articles = []\n    \n    for article in articles:\n        # Clean title (remove extra spaces, convert to title case)\n        clean_title = article['title'].strip().title()\n        \n        # Extract just the name from author\n        clean_author = article['author'].replace('By ', '')\n        \n        # Parse date\n        article_date = datetime.strptime(article['date'], '%Y-%m-%d')\n        \n        cleaned_article = {\n            'title': clean_title,\n            'author': clean_author,\n            'date': article_date.strftime('%B %d, %Y'),\n            'scraped_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        }\n        \n        cleaned_articles.append(cleaned_article)\n    \n    return cleaned_articles\n\n# Process the data\nprocessed_articles = clean_and_process_data(scraped_data)\n\n# Display processed data\nprint(\"Processed Articles:\")\nfor article in processed_articles:\n    print(f\"📰 {article['title']}\")\n    print(f\"✍️  {article['author']}\")\n    print(f\"📅 {article['date']}\")\n    print(f\"🕒 Scraped: {article['scraped_at']}\")\n    print(\"-\" * 40)\n\n# Save to JSON (simulation)\nprint(f\"\\nSaved {len(processed_articles)} articles to database\")",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Extract Email Addresses",
        "description": "Write a function to extract email addresses from text using string methods.",
        "starterCode": "def extract_emails(text):\n    # Extract email addresses from text\n    pass\n\n# Test data\ntext = \"Contact us at info@company.com or support@help.org for assistance.\"\nprint(extract_emails(text))",
        "expectedOutput": "['info@company.com', 'support@help.org']",
        "solution": "def extract_emails(text):\n    emails = []\n    words = text.split()\n    for word in words:\n        if '@' in word and '.' in word:\n            # Clean punctuation\n            email = word.strip('.,!?;:')\n            emails.append(email)\n    return emails"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "Price Monitor",
        "description": "Create a price monitoring function that tracks price changes from simulated product data.",
        "starterCode": "def monitor_prices(current_prices, historical_prices):\n    # Compare current prices with historical data\n    pass\n\n# Test data\ncurrent = {'laptop': 999, 'phone': 699, 'tablet': 399}\nhistorical = {'laptop': 1099, 'phone': 699, 'tablet': 449}\n\nprint(monitor_prices(current, historical))",
        "expectedOutput": "{'laptop': -100, 'phone': 0, 'tablet': -50}",
        "solution": "def monitor_prices(current_prices, historical_prices):\n    price_changes = {}\n    for product in current_prices:\n        if product in historical_prices:\n            change = current_prices[product] - historical_prices[product]\n            price_changes[product] = change\n    return price_changes"
      },
      {
        "id": "hard-1",
        "difficulty": "Hard",
        "title": "Data Aggregator",
        "description": "Build a function that aggregates and analyzes scraped data with statistics.",
        "starterCode": "def analyze_scraped_data(articles):\n    # Analyze article data and return insights\n    pass\n\n# Test data\narticles = [\n    {'author': 'Alice', 'date': '2024-01-15', 'category': 'tech'},\n    {'author': 'Bob', 'date': '2024-01-14', 'category': 'tech'},\n    {'author': 'Alice', 'date': '2024-01-13', 'category': 'science'}\n]\n\nprint(analyze_scraped_data(articles))",
        "expectedOutput": "{'total_articles': 3, 'authors': {'Alice': 2, 'Bob': 1}, 'categories': {'tech': 2, 'science': 1}}",
        "solution": "def analyze_scraped_data(articles):\n    analysis = {\n        'total_articles': len(articles),\n        'authors': {},\n        'categories': {}\n    }\n    \n    for article in articles:\n        # Count by author\n        author = article['author']\n        analysis['authors'][author] = analysis['authors'].get(author, 0) + 1\n        \n        # Count by category\n        category = article['category']\n        analysis['categories'][category] = analysis['categories'].get(category, 0) + 1\n    \n    return analysis"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "What should you always check before scraping a website?",
        "type": "multiple-choice",
        "options": ["The website's color scheme", "The robots.txt file and terms of service", "The number of pages", "The website's age"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "Which Python library is commonly used for parsing HTML?",
        "type": "multiple-choice",
        "options": ["requests", "BeautifulSoup", "json", "datetime"],
        "correctAnswer": 1
      },
      {
        "id": "q3",
        "question": "Why is rate limiting important in web scraping?",
        "type": "multiple-choice",
        "options": ["To make code run faster", "To avoid overloading the target server", "To use less memory", "To improve data quality"],
        "correctAnswer": 1
      }
    ]
  },
  {
    "id": "data-science-intro",
    "title": "Data Science with Python",
    "description": "Explore data analysis, visualization, and machine learning fundamentals using Python.",
    "category": "Data Science",
    "difficulty": "advanced",
    "estimatedTime": 35,
    "xpReward": 150,
    "prerequisites": ["python-dictionaries", "python-functions", "python-modules"],
    "steps": [
      {
        "id": "step-1",
        "type": "content",
        "title": "Introduction to Data Science",
        "content": "Data Science is an interdisciplinary field that uses scientific methods, processes, algorithms, and systems to extract knowledge and insights from structured and unstructured data.\n\nKey components of Data Science:\n• Data Collection: Gathering data from various sources\n• Data Cleaning: Preparing and cleaning raw data\n• Exploratory Data Analysis (EDA): Understanding data patterns\n• Statistical Analysis: Applying statistical methods\n• Machine Learning: Building predictive models\n• Data Visualization: Creating charts and graphs\n• Communication: Presenting findings effectively\n\nPython libraries commonly used:\n• pandas: Data manipulation and analysis\n• numpy: Numerical computing\n• matplotlib/seaborn: Data visualization\n• scikit-learn: Machine learning\n• jupyter: Interactive notebooks"
      },
      {
        "id": "step-2",
        "type": "code",
        "title": "Working with Data Structures",
        "content": "Let's work with data using Python's built-in structures (simulating pandas functionality):",
        "code": "# Sample sales data\nsales_data = [\n    {'date': '2024-01-01', 'product': 'Laptop', 'quantity': 5, 'price': 999, 'region': 'North'},\n    {'date': '2024-01-01', 'product': 'Phone', 'quantity': 12, 'price': 699, 'region': 'South'},\n    {'date': '2024-01-02', 'product': 'Tablet', 'quantity': 8, 'price': 399, 'region': 'North'},\n    {'date': '2024-01-02', 'product': 'Laptop', 'quantity': 3, 'price': 999, 'region': 'East'},\n    {'date': '2024-01-03', 'product': 'Phone', 'quantity': 15, 'price': 699, 'region': 'West'}\n]\n\n# Calculate total revenue for each sale\nfor sale in sales_data:\n    sale['revenue'] = sale['quantity'] * sale['price']\n    print(f\"{sale['date']}: {sale['product']} - ${sale['revenue']}\")\n\nprint(\"\\n\" + \"=\"*50)\n\n# Data aggregation - total revenue by product\nrevenue_by_product = {}\nfor sale in sales_data:\n    product = sale['product']\n    revenue = sale['revenue']\n    revenue_by_product[product] = revenue_by_product.get(product, 0) + revenue\n\nprint(\"Revenue by Product:\")\nfor product, revenue in revenue_by_product.items():\n    print(f\"{product}: ${revenue:,}\")",
        "language": "python"
      },
      {
        "id": "step-3",
        "type": "code",
        "title": "Statistical Analysis",
        "content": "Let's perform basic statistical analysis on our data:",
        "code": "# Extract numerical data for analysis\nrevenues = [sale['revenue'] for sale in sales_data]\nquantities = [sale['quantity'] for sale in sales_data]\nprices = [sale['price'] for sale in sales_data]\n\ndef calculate_statistics(data):\n    \"\"\"Calculate basic statistics for a list of numbers\"\"\"\n    n = len(data)\n    \n    # Mean (average)\n    mean = sum(data) / n\n    \n    # Median (middle value)\n    sorted_data = sorted(data)\n    if n % 2 == 0:\n        median = (sorted_data[n//2 - 1] + sorted_data[n//2]) / 2\n    else:\n        median = sorted_data[n//2]\n    \n    # Mode (most frequent value)\n    frequency = {}\n    for value in data:\n        frequency[value] = frequency.get(value, 0) + 1\n    mode = max(frequency, key=frequency.get)\n    \n    # Range\n    data_range = max(data) - min(data)\n    \n    # Standard deviation (simplified)\n    variance = sum((x - mean) ** 2 for x in data) / n\n    std_dev = variance ** 0.5\n    \n    return {\n        'mean': round(mean, 2),\n        'median': median,\n        'mode': mode,\n        'range': data_range,\n        'min': min(data),\n        'max': max(data),\n        'std_dev': round(std_dev, 2)\n    }\n\n# Analyze revenue data\nrevenue_stats = calculate_statistics(revenues)\nprint(\"Revenue Statistics:\")\nfor stat, value in revenue_stats.items():\n    print(f\"{stat.title()}: ${value:,}\" if 'revenue' in stat or stat in ['mean', 'median', 'mode', 'range', 'min', 'max'] else f\"{stat.title()}: {value}\")\n\nprint(\"\\nQuantity Statistics:\")\nquantity_stats = calculate_statistics(quantities)\nfor stat, value in quantity_stats.items():\n    print(f\"{stat.title()}: {value}\")",
        "language": "python"
      },
      {
        "id": "step-4",
        "type": "code",
        "title": "Data Visualization Concepts",
        "content": "Let's create a simple text-based visualization and understand chart types:",
        "code": "# Create a simple bar chart using text\ndef create_text_bar_chart(data, title):\n    \"\"\"Create a simple text-based bar chart\"\"\"\n    print(f\"\\n{title}\")\n    print(\"=\" * len(title))\n    \n    max_value = max(data.values())\n    scale_factor = 30 / max_value  # Scale to fit in 30 characters\n    \n    for label, value in data.items():\n        bar_length = int(value * scale_factor)\n        bar = \"█\" * bar_length\n        print(f\"{label:10} |{bar} ${value:,}\")\n    \n    print()\n\n# Visualize revenue by product\ncreate_text_bar_chart(revenue_by_product, \"Revenue by Product\")\n\n# Regional analysis\nrevenue_by_region = {}\nfor sale in sales_data:\n    region = sale['region']\n    revenue = sale['revenue']\n    revenue_by_region[region] = revenue_by_region.get(region, 0) + revenue\n\ncreate_text_bar_chart(revenue_by_region, \"Revenue by Region\")\n\n# Data insights\nprint(\"Key Insights:\")\nprint(f\"• Total Revenue: ${sum(revenues):,}\")\nprint(f\"• Average Sale: ${sum(revenues)/len(revenues):,.2f}\")\nprint(f\"• Best Selling Product: {max(revenue_by_product, key=revenue_by_product.get)}\")\nprint(f\"• Top Region: {max(revenue_by_region, key=revenue_by_region.get)}\")\n\n# Correlation analysis (simplified)\nprint(f\"\\nCorrelation Analysis:\")\nprint(f\"• Higher quantities don't always mean higher revenue\")\nprint(f\"• Product price significantly impacts total revenue\")\nprint(f\"• Regional performance varies significantly\")",
        "language": "python"
      },
      {
        "id": "step-5",
        "type": "code",
        "title": "Simple Machine Learning Concept",
        "content": "Let's implement a basic linear regression to predict sales:",
        "code": "# Simple linear regression to predict revenue based on quantity\ndef simple_linear_regression(x_data, y_data):\n    \"\"\"Calculate linear regression coefficients\"\"\"\n    n = len(x_data)\n    \n    # Calculate means\n    x_mean = sum(x_data) / n\n    y_mean = sum(y_data) / n\n    \n    # Calculate slope (m) and intercept (b) for y = mx + b\n    numerator = sum((x_data[i] - x_mean) * (y_data[i] - y_mean) for i in range(n))\n    denominator = sum((x_data[i] - x_mean) ** 2 for i in range(n))\n    \n    slope = numerator / denominator if denominator != 0 else 0\n    intercept = y_mean - slope * x_mean\n    \n    return slope, intercept\n\ndef predict_revenue(quantity, slope, intercept):\n    \"\"\"Predict revenue based on quantity\"\"\"\n    return slope * quantity + intercept\n\n# Use quantity to predict revenue\nquantities = [sale['quantity'] for sale in sales_data]\nrevenues = [sale['revenue'] for sale in sales_data]\n\nslope, intercept = simple_linear_regression(quantities, revenues)\n\nprint(\"Linear Regression Model:\")\nprint(f\"Revenue = {slope:.2f} * Quantity + {intercept:.2f}\")\nprint()\n\n# Make predictions\nprint(\"Predictions vs Actual:\")\nprint(\"Quantity | Predicted | Actual   | Difference\")\nprint(\"-\" * 45)\n\nfor i, (qty, actual) in enumerate(zip(quantities, revenues)):\n    predicted = predict_revenue(qty, slope, intercept)\n    difference = abs(predicted - actual)\n    print(f\"{qty:8} | ${predicted:8.0f} | ${actual:8} | ${difference:8.0f}\")\n\n# Test with new data\nprint(\"\\nNew Predictions:\")\ntest_quantities = [10, 20, 30]\nfor qty in test_quantities:\n    predicted = predict_revenue(qty, slope, intercept)\n    print(f\"If quantity = {qty}, predicted revenue = ${predicted:,.0f}\")",
        "language": "python"
      }
    ],
    "practiceProblems": [
      {
        "id": "easy-1",
        "difficulty": "Easy",
        "title": "Data Summary",
        "description": "Write a function to calculate basic summary statistics for a dataset.",
        "starterCode": "def summarize_data(numbers):\n    # Calculate count, sum, average, min, max\n    pass\n\n# Test data\ndata = [10, 15, 20, 25, 30, 35, 40]\nprint(summarize_data(data))",
        "expectedOutput": "{'count': 7, 'sum': 175, 'average': 25.0, 'min': 10, 'max': 40}",
        "solution": "def summarize_data(numbers):\n    if not numbers:\n        return {}\n    \n    return {\n        'count': len(numbers),\n        'sum': sum(numbers),\n        'average': sum(numbers) / len(numbers),\n        'min': min(numbers),\n        'max': max(numbers)\n    }"
      },
      {
        "id": "medium-1",
        "difficulty": "Medium",
        "title": "Data Grouping",
        "description": "Create a function that groups data by category and calculates totals.",
        "starterCode": "def group_and_sum(data, group_key, sum_key):\n    # Group data and calculate sums\n    pass\n\n# Test data\nsales = [\n    {'category': 'Electronics', 'amount': 1000},\n    {'category': 'Clothing', 'amount': 500},\n    {'category': 'Electronics', 'amount': 1500},\n    {'category': 'Clothing', 'amount': 300}\n]\n\nprint(group_and_sum(sales, 'category', 'amount'))",
        "expectedOutput": "{'Electronics': 2500, 'Clothing': 800}",
        "solution": "def group_and_sum(data, group_key, sum_key):\n    result = {}\n    for item in data:\n        category = item[group_key]\n        amount = item[sum_key]\n        result[category] = result.get(category, 0) + amount\n    return result"
      },
      {
        "id": "hard-1",
        "difficulty": "Hard",
        "title": "Moving Average",
        "description": "Implement a function to calculate moving averages for time series data.",
        "starterCode": "def moving_average(data, window_size):\n    # Calculate moving averages\n    pass\n\n# Test data\nprices = [100, 102, 101, 103, 105, 104, 106, 108, 107, 109]\nwindow = 3\nprint(moving_average(prices, window))",
        "expectedOutput": "[101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0]",
        "solution": "def moving_average(data, window_size):\n    if window_size > len(data):\n        return []\n    \n    moving_averages = []\n    for i in range(len(data) - window_size + 1):\n        window_sum = sum(data[i:i + window_size])\n        avg = window_sum / window_size\n        moving_averages.append(avg)\n    \n    return moving_averages"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "What is the first step in most data science projects?",
        "type": "multiple-choice",
        "options": ["Building models", "Data collection and cleaning", "Creating visualizations", "Writing reports"],
        "correctAnswer": 1
      },
      {
        "id": "q2",
        "question": "Which statistical measure is most affected by outliers?",
        "type": "multiple-choice",
        "options": ["Median", "Mode", "Mean", "Range"],
        "correctAnswer": 2
      },
      {
        "id": "q3",
        "question": "What does linear regression help us do?",
        "type": "multiple-choice",
        "options": ["Sort data", "Predict values based on relationships", "Clean data", "Visualize data"],
        "correctAnswer": 1
      }
    ]
  }
]